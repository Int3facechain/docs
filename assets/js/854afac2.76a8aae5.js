"use strict";(self.webpackChunkint3face=self.webpackChunkint3face||[]).push([[378],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(g,s(s({ref:t},c),{},{components:n})):r.createElement(g,s({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5271:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},s="ADR-008: Automatic Signer List",o={unversionedId:"ADR/adr-008-automatic-signer-list",id:"ADR/adr-008-automatic-signer-list",title:"ADR-008: Automatic Signer List",description:"Status",source:"@site/docs/ADR/adr-008-automatic-signer-list.md",sourceDirName:"ADR",slug:"/ADR/adr-008-automatic-signer-list",permalink:"/docs/ADR/adr-008-automatic-signer-list",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"ADR-007: E2E Tests",permalink:"/docs/ADR/adr-007-e2e-tests"},next:{title:"ADR-009: Blockchain Explorer",permalink:"/docs/ADR/adr-009-blockchain-explorer"}},l={},p=[{value:"Status",id:"status",level:2},{value:"Problem 1: Two gov proposals",id:"problem-1-two-gov-proposals",level:2},{value:"Problem 2: Uncontrolled committee participants",id:"problem-2-uncontrolled-committee-participants",level:2},{value:"Current Keygen Process",id:"current-keygen-process",level:2},{value:"Accepted Approach: Returning Keygen Result",id:"accepted-approach-returning-keygen-result",level:2},{value:"Design",id:"design",level:3},{value:"Schema",id:"schema",level:3},{value:"State",id:"state",level:3},{value:"Unresolved Issues",id:"unresolved-issues",level:2},{value:"Implementation Steps",id:"implementation-steps",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"adr-008-automatic-signer-list"},"ADR-008: Automatic Signer List"),(0,a.kt)("h2",{id:"status"},"Status"),(0,a.kt)("p",null,"Design"),(0,a.kt)("h2",{id:"problem-1-two-gov-proposals"},"Problem 1: Two gov proposals"),(0,a.kt)("p",null,"Currently, the ",(0,a.kt)("inlineCode",{parentName:"p"},"x/bridge")," module's signers list does not update automatically when a new pool public key is generated via TSS. So, one additional government proposal is required to update this list and complete the key generation process. Without this update, the list of authorized signers for outbound and inbound transfer would be inconsistent."),(0,a.kt)("h2",{id:"problem-2-uncontrolled-committee-participants"},"Problem 2: Uncontrolled committee participants"),(0,a.kt)("p",null,"At present, when peers generate the keygen request, they query all ",(0,a.kt)("strong",{parentName:"p"},"online")," peers from the TSS server and include them in the keygen message. This scenario can lead to problems:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"If a peer has a different list of peers (due to unforeseen circumstances like network issues), the keygen process may fail as consensus on the list of participants would not be possible. This could trigger multiple attempts before a successful result is achieved."),(0,a.kt)("li",{parentName:"ol"},"There is no control over the committee participants. The list of ",(0,a.kt)("strong",{parentName:"li"},"online")," peers may not align with our expectations.")),(0,a.kt)("h2",{id:"current-keygen-process"},"Current Keygen Process"),(0,a.kt)("p",null,"Now, the complete process of key generation is the following:\nThe current key generation process is as follows:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create a government proposal that includes a keygen block, and approve it."),(0,a.kt)("li",{parentName:"ol"},"Witness the keygen block with observers."),(0,a.kt)("li",{parentName:"ol"},"Form a committee based on all the ",(0,a.kt)("strong",{parentName:"li"},"online")," peers."),(0,a.kt)("li",{parentName:"ol"},"<-- At this point, the committee used for outbound transfer varies from the list of signers for inbound transfer. Also, the committee was created based on online peers, so we cannot know the list of participants beforehand."),(0,a.kt)("li",{parentName:"ol"},"Request validator public keys from all validators."),(0,a.kt)("li",{parentName:"ol"},"Create another government proposal that includes the updated signer list (with all those validator public keys) and approve it."),(0,a.kt)("li",{parentName:"ol"},"<-- By now, the keygen process is fully complete.")),(0,a.kt)("p",null,"It is important to note that this process requires two government proposals and extensive interaction with validators. Moreover, the list of peers is undetermined."),(0,a.kt)("h2",{id:"accepted-approach-returning-keygen-result"},"Accepted Approach: Returning Keygen Result"),(0,a.kt)("h3",{id:"design"},"Design"),(0,a.kt)("p",null,"One proposed solution is to return the keygen result to the Int3face chain after the TSS keygen procedure is completed. Here, all validators will need to automatically submit a message listing new committee peers and a new pool public key to Int3face."),(0,a.kt)("p",null,"Once Int3face receives these messages, and their count surpasses the threshold (more than 2/3 of the number of participants), the keygen block is considered to be successfully executed."),(0,a.kt)("p",null,"Following the success, Int3face auto-updates the list of signers, including all the signers listed in the accepted keygen block result."),(0,a.kt)("p",null,"For Int3face to correctly handle the threshold, it needs to know the count of signers beforehand. Hence, it is recommended to incorporate the list of all expected peers in the keygen block. This adjustment can make the keygen process more transparent and manageable. In addition, the keygen government proposal will include new peers, allowing voters to verify the committee participants and vote for them in advance."),(0,a.kt)("h3",{id:"schema"},"Schema"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message MsgKeyGen {\n  // ParticipantsPKs is a list of observers' public keys that we expect \n  // to include in the next committee.\n  repeated string participants_pks = 1;\n  // Randomness is used in the leader election during the key generation\n  // process and can be considered a deterministic source of entropy for all peers.\n  // Essentially, just a random number.\n  uint64 randomness = 2;\n}\n\nmessage MsgKeyGenResponse {}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message MsgSubmitKeyGenResult {\n  // Sender is a sender's address. Must be part of the original ParticipantsPKs list.\n  string sender = 1;\n  // KeygenID is a unique identifier for the original keygen. May be either\n  // proposal ID or keygen tx hash.\n  string keygen_id = 2;\n  // ParticipantsPKs is a list of observers' public keys participating \n  // in the newly generated committee.\n  repeated string participants_pks = 3;\n  // PoolPK is a newly generated pool public key of the committee.\n  string pool_pk = 4;\n}\n\nmessage MsgSubmitKeyGenResultResponse {}\n")),(0,a.kt)("h3",{id:"state"},"State"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"KeyGen")),(0,a.kt)("p",null,"When accepting the keygen results, the ",(0,a.kt)("inlineCode",{parentName:"p"},"KeyGenResult")," object is saved in the state."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"KeyGen: ",(0,a.kt)("inlineCode",{parentName:"li"},"0x04 | hash(keygen_id + participants_pks + pool_pk) -> ProtocolBuffer(KeyGen)"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},'message KeyGen {\n  // KeygenID is a unique identifier for the original keygen. May be either\n  // proposal ID or keygen tx hash.\n  string keygen_id = 1;\n  // ParticipantsPKs is a list of observers\' public keys participating \n  // in the newly generated committee.\n  repeated string participants_pks = 2;\n  // PoolPK is a newly generated pool public key of the committee.\n  string pool_pk = 3;\n  // Voters is a list of validators signed this keygen result.\n  repeated string voters = 4 [ (gogoproto.moretags) = "yaml:\\"voters\\"" ];\n  // Finalized indicates whether the keygen needs more votes or has\n  // already accumulated a sufficient number. The finalised flag is set\n  // to true as soon as length(voters) is greater than or equal to\n  // the 2/3th of the expected participants number.\n  bool finalized = 5 [ (gogoproto.moretags) = "yaml:\\"finalized\\"" ];\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"KeyGenResult")),(0,a.kt)("p",null,"This object is saved in the state after ",(0,a.kt)("inlineCode",{parentName:"p"},"KeyGen")," accumulates a sufficient number of votes. "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"KeyGenResult: ",(0,a.kt)("inlineCode",{parentName:"li"},"0x05 | pool_pk -> ProtocolBuffer(KeyGenResult)"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message KeyGenResult {\n  // KeygenID is a unique identifier for the original keygen. May be either\n  // proposal ID or keygen tx hash.\n  string keygen_id = 1;\n  // ParticipantsPKs is a list of observers' public keys participating \n  // in the newly generated committee.\n  repeated string participants_pks = 2;\n}\n")),(0,a.kt)("h2",{id:"unresolved-issues"},"Unresolved Issues"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Observers have public keys and validator private keys, that are different. The first is utilized during the TSS signing while the second is applied during the inbound transfer signing. How to associate the observer public key with the validator public key?")),(0,a.kt)("h2",{id:"implementation-steps"},"Implementation Steps"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Research how to associate the validator address with the observer address."),(0,a.kt)("li",{parentName:"ol"},"Modify ",(0,a.kt)("inlineCode",{parentName:"li"},"MsgKeygen")," to include the expected list of signers."),(0,a.kt)("li",{parentName:"ol"},"Modify the observer to work with the list of signers instead of online peers."),(0,a.kt)("li",{parentName:"ol"},"Add a message to submit the keygen results to Int3face."),(0,a.kt)("li",{parentName:"ol"},"Store keygen results in the state: pool public key along with related participants."),(0,a.kt)("li",{parentName:"ol"},"Add a mechanism to vote on keygen results and accept the one with the super majority of votes."),(0,a.kt)("li",{parentName:"ol"},"Auto-update the list of legit signers after the keygen result is accepted.")))}d.isMDXComponent=!0}}]);