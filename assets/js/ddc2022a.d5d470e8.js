"use strict";(self.webpackChunkint3face=self.webpackChunkint3face||[]).push([[7694],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,h=u["".concat(s,".").concat(d)]||u[d]||p[d]||o;return n?a.createElement(h,i(i({ref:t},m),{},{components:n})):a.createElement(h,i({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},24827:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={},i="Overview",l={unversionedId:"neutron/modules/3rdparty/skip/feemarket/overview",id:"neutron/modules/3rdparty/skip/feemarket/overview",title:"Overview",description:"Note https://github.com/skip-mev/feemarket/blob/main/x/feemarket/README.md",source:"@site/docs/neutron/modules/3rdparty/skip/feemarket/overview.md",sourceDirName:"neutron/modules/3rdparty/skip/feemarket",slug:"/neutron/modules/3rdparty/skip/feemarket/overview",permalink:"/neutron/modules/3rdparty/skip/feemarket/overview",draft:!1,tags:[],version:"current",frontMatter:{}},s={},c=[{value:"How to query gas prices for all accepted denoms?",id:"how-to-query-gas-prices-for-all-accepted-denoms",level:2},{value:"How to query a gas price for a particular denom?",id:"how-to-query-a-gas-price-for-a-particular-denom",level:2},{value:"How to query the current state of the Feemarket module?",id:"how-to-query-the-current-state-of-the-feemarket-module",level:2},{value:"How to query the current params of the Feemarket module?",id:"how-to-query-the-current-params-of-the-feemarket-module",level:2}],m={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"overview"},"Overview"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")," you can find more info about Slinky and how it works in the official Skip's Feemarket docs: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/skip-mev/feemarket/blob/main/x/feemarket/README.md"},"https://github.com/skip-mev/feemarket/blob/main/x/feemarket/README.md"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Feemarket")," implements the AIMD (Additive Increase Multiplicative Decrease) EIP-1559 fee market as described in this AIMD EIP-1559 research publication."),(0,r.kt)("p",null,"The AIMD EIP-1559 fee market is a slight modification to Ethereum's EIP-1559 fee market. Specifically it introduces the notion of a adaptive learning rate which scales the base fee (reserve price to be included in a block) more aggressively when the network is congested and less aggressively when the network is not congested. This is primarily done to address the often cited criticism of EIP-1559 that it's base fee often lags behind the current demand for block space. The learning rate on Ethereum is effectively hard-coded to be 12.5%, which means that between any two blocks the base fee can maximally increase by 12.5% or decrease by 12.5%. Additionally, AIMD EIP-1559 differs from Ethereum's EIP-1559 by considering a configured time window (number of blocks) to consider when calculating and comparing target block utilization and current block utilization."),(0,r.kt)("h2",{id:"how-to-query-gas-prices-for-all-accepted-denoms"},"How to query gas prices for all accepted denoms?"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"(via a local running chain): ",(0,r.kt)("inlineCode",{parentName:"li"},"curl http://<NEUTRON_REST_NODE_ADDRESS>:1317/feemarket/v1/gas_prices")),(0,r.kt)("li",{parentName:"ol"},"(via chain app CLI): ",(0,r.kt)("inlineCode",{parentName:"li"},"neutrond q feemarket gas-prices")),(0,r.kt)("li",{parentName:"ol"},"(via gRPC): ",(0,r.kt)("inlineCode",{parentName:"li"},"grpcurl -plaintext <NEUTRON_GRPC_NODE_ADDRESS>:9090 feemarket.feemarket.v1.Query/GasPrices"))),(0,r.kt)("p",null,"This will return a JSON list of gas prices in all available denoms."),(0,r.kt)("h2",{id:"how-to-query-a-gas-price-for-a-particular-denom"},"How to query a gas price for a particular denom?"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"(via a local running chain): ",(0,r.kt)("inlineCode",{parentName:"li"},"curl http://<NEUTRON_REST_NODE_ADDRESS>:1317/feemarket/v1/gas_price/{denom}")),(0,r.kt)("li",{parentName:"ol"},"(via chain app CLI): ",(0,r.kt)("inlineCode",{parentName:"li"},"neutrond q feemarket gas-price {denom}")),(0,r.kt)("li",{parentName:"ol"},"(via gRPC): ",(0,r.kt)("inlineCode",{parentName:"li"},'grpcurl -d \'{"denom":"{denom}"}\'  -plaintext <NEUTRON_GRPC_NODE_ADDRESS>:9090 feemarket.feemarket.v1.Query/GasPrice'))),(0,r.kt)("p",null,"This will return a gas prices for a particular denom."),(0,r.kt)("h2",{id:"how-to-query-the-current-state-of-the-feemarket-module"},"How to query the current state of the Feemarket module?"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"(via a local running chain): ",(0,r.kt)("inlineCode",{parentName:"li"},"curl http://<NEUTRON_REST_NODE_ADDRESS>:1317/feemarket/v1/state")),(0,r.kt)("li",{parentName:"ol"},"(via chain app CLI): ",(0,r.kt)("inlineCode",{parentName:"li"},"neutrond q feemarket state")),(0,r.kt)("li",{parentName:"ol"},"(via gRPC): ",(0,r.kt)("inlineCode",{parentName:"li"},"grpcurl -plaintext <NEUTRON_GRPC_NODE_ADDRESS>:9090 feemarket.feemarket.v1.Query/State"))),(0,r.kt)("p",null,"This will return the current state of the Feemarket module within the following structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},'// State is utilized to track the current state of the fee market. This includes\n// the current base fee, learning rate, and block utilization within the\n// specified AIMD window.\nmessage State {\n  // BaseGasPrice is the current base fee. This is denominated in the fee per\n  // gas unit.\n  string base_gas_price = 1 [\n    (cosmos_proto.scalar) = "cosmos.Dec",\n    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",\n    (gogoproto.nullable) = false\n  ];\n\n  // LearningRate is the current learning rate.\n  string learning_rate = 2 [\n    (cosmos_proto.scalar) = "cosmos.Dec",\n    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",\n    (gogoproto.nullable) = false\n  ];\n\n  // Window contains a list of the last blocks\' utilization values. This is used\n  // to calculate the next base fee. This stores the number of units of gas\n  // consumed per block.\n  repeated uint64 window = 3;\n\n  // Index is the index of the current block in the block utilization window.\n  uint64 index = 4;\n}\n')),(0,r.kt)("h2",{id:"how-to-query-the-current-params-of-the-feemarket-module"},"How to query the current params of the Feemarket module?"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"(via a local running chain): ",(0,r.kt)("inlineCode",{parentName:"li"},"curl http://<NEUTRON_REST_NODE_ADDRESS>:1317/feemarket/v1/params")),(0,r.kt)("li",{parentName:"ol"},"(via chain app CLI): ",(0,r.kt)("inlineCode",{parentName:"li"},"neutrond q feemarket params")),(0,r.kt)("li",{parentName:"ol"},"(via gRPC): ",(0,r.kt)("inlineCode",{parentName:"li"},"grpcurl -plaintext <NEUTRON_GRPC_NODE_ADDRESS>:9090 feemarket.feemarket.v1.Query/Params"))),(0,r.kt)("p",null,"This will return the current params of the Feemarket module within the following structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},'// Params contains the required set of parameters for the EIP1559 fee market\n// plugin implementation.\nmessage Params {\n  // Alpha is the amount we additively increase the learning rate\n  // when it is above or below the target +/- threshold.\n  //\n  // Must be > 0.\n  string alpha = 1 [\n    (cosmos_proto.scalar) = "cosmos.Dec",\n    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",\n    (gogoproto.nullable) = false\n  ];\n\n  // Beta is the amount we multiplicatively decrease the learning rate\n  // when it is within the target +/- threshold.\n  //\n  // Must be [0, 1].\n  string beta = 2 [\n    (cosmos_proto.scalar) = "cosmos.Dec",\n    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",\n    (gogoproto.nullable) = false\n  ];\n\n  // Gamma is the threshold for the learning rate. If the learning rate is\n  // above or below the target +/- threshold, we additively increase the\n  // learning rate by Alpha. Otherwise, we multiplicatively decrease the\n  // learning rate by Beta.\n  //\n  // Must be [0, 0.5].\n  string gamma = 3 [\n    (cosmos_proto.scalar) = "cosmos.Dec",\n    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",\n    (gogoproto.nullable) = false\n  ];\n\n  // Delta is the amount we additively increase/decrease the gas price when the\n  // net block utilization difference in the window is above/below the target\n  // utilization.\n  string delta = 4 [\n    (cosmos_proto.scalar) = "cosmos.Dec",\n    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",\n    (gogoproto.nullable) = false\n  ];\n\n  // MinBaseGasPrice determines the initial gas price of the module and the\n  // global minimum for the network.\n  string min_base_gas_price = 5 [\n    (cosmos_proto.scalar) = "cosmos.Dec",\n    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",\n    (gogoproto.nullable) = false\n  ];\n\n  // MinLearningRate is the lower bound for the learning rate.\n  string min_learning_rate = 6 [\n    (cosmos_proto.scalar) = "cosmos.Dec",\n    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",\n    (gogoproto.nullable) = false\n  ];\n\n  // MaxLearningRate is the upper bound for the learning rate.\n  string max_learning_rate = 7 [\n    (cosmos_proto.scalar) = "cosmos.Dec",\n    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",\n    (gogoproto.nullable) = false\n  ];\n\n  // MaxBlockUtilization is the maximum block utilization.\n  uint64 max_block_utilization = 8;\n\n  // Window defines the window size for calculating an adaptive learning rate\n  // over a moving window of blocks.\n  uint64 window = 9;\n\n  // FeeDenom is the denom that will be used for all fee payments.\n  string fee_denom = 10;\n\n  // Enabled is a boolean that determines whether the EIP1559 fee market is\n  // enabled.\n  bool enabled = 11;\n\n  // DistributeFees is a boolean that determines whether the fees are burned or\n  // distributed to all stakers.\n  bool distribute_fees = 12;\n}\n')))}p.isMDXComponent=!0}}]);