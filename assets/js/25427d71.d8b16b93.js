"use strict";(self.webpackChunkint3face=self.webpackChunkint3face||[]).push([[700],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=d(n),m=l,k=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,i=new Array(o);i[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[u]="string"==typeof e?e:l,i[1]=r;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3785:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var a=n(7462),l=(n(7294),n(3905));const o={},i="Mainnet",r={unversionedId:"deployment/mainnet",id:"deployment/mainnet",title:"Mainnet",description:"Hardware",source:"@site/docs/deployment/mainnet.md",sourceDirName:"deployment",slug:"/deployment/mainnet",permalink:"/docs/deployment/mainnet",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"tBTC & nBTC: Technical",permalink:"/docs/comparisons/tBTC-iBTC-nBTC-tech"},next:{title:"Testnet",permalink:"/docs/deployment/testnet"}},s={},d=[{value:"Hardware",id:"hardware",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Golang",id:"golang",level:3},{value:"Linux installation",id:"linux-installation",level:3},{value:"Build essential",id:"build-essential",level:3},{value:"Int3face node",id:"int3face-node",level:2},{value:"Build and install the binary",id:"build-and-install-the-binary",level:3},{value:"Verify the installation",id:"verify-the-installation",level:3},{value:"Initialize node",id:"initialize-node",level:3},{value:"Download genesis",id:"download-genesis",level:3},{value:"Download app config",id:"download-app-config",level:3},{value:"Import validator key",id:"import-validator-key",level:3},{value:"Create new key",id:"create-new-key",level:4},{value:"Import existing",id:"import-existing",level:4},{value:"Sync the node",id:"sync-the-node",level:3},{value:"Download and Run update_trust.sh script",id:"download-and-run-update_trustsh-script",level:4},{value:"Start the node",id:"start-the-node",level:3},{value:"Top up the account",id:"top-up-the-account",level:3},{value:"Get your Tendermint validator public key",id:"get-your-tendermint-validator-public-key",level:3},{value:"Submit validator creation",id:"submit-validator-creation",level:3},{value:"Start a background service",id:"start-a-background-service",level:3}],c={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"mainnet"},"Mainnet"),(0,l.kt)("h2",{id:"hardware"},"Hardware"),(0,l.kt)("p",null,"We recommend selecting an all-purpose server with:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"4 or more physical (or 8 virtual) CPU cores"),(0,l.kt)("li",{parentName:"ul"},"At least 500GB of SSD disk storage"),(0,l.kt)("li",{parentName:"ul"},"At least 16GB of memory"),(0,l.kt)("li",{parentName:"ul"},"At least 100mbps network bandwidth")),(0,l.kt)("p",null,"The usage of the blockchain grows, plus it may be needed to bootstrap external chain nodes, so the server requirements may increase as well, so you should have a plan for updating your server as well."),(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("h3",{id:"golang"},"Golang"),(0,l.kt)("p",null,"This project requires Go version 1.22 or later. Install Go by following the instructions on the official ",(0,l.kt)("a",{parentName:"p",href:"https://go.dev/doc/install"},"Go installation guide"),"."),(0,l.kt)("h3",{id:"linux-installation"},"Linux installation"),(0,l.kt)("p",null,"Install the latest version of Golang"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"wget https://go.dev/dl/go1.22.4.linux-amd64.tar.gz\n")),(0,l.kt)("p",null,"Remove any previous Go installation and install the new version"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"}," rm -rf /usr/local/go && tar -C /usr/local -xzf go1.22.4.linux-amd64.tar.gz\n")),(0,l.kt)("p",null,"Add ",(0,l.kt)("inlineCode",{parentName:"p"},"/usr/local/go/bin")," to the ",(0,l.kt)("inlineCode",{parentName:"p"},"PATH")," environment variable.\nYou can do this by adding the following line to your ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/.profile")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/profile")," (for a system-wide installation):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"export PATH=$PATH:/usr/local/go/bin\n")),(0,l.kt)("p",null,"Verify that you've installed Go by opening a command prompt and typing the following command"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"go version\n")),(0,l.kt)("h3",{id:"build-essential"},"Build essential"),(0,l.kt)("p",null,"Install essential tools and packages needed to compile and build the binaries."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update && sudo apt upgrade -y\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install build-essential -y\n")),(0,l.kt)("h2",{id:"int3face-node"},"Int3face node"),(0,l.kt)("h3",{id:"build-and-install-the-binary"},"Build and install the binary"),(0,l.kt)("p",null,"Int3face node provides CLI commands for submitting inbound and outbound transfers and other queries."),(0,l.kt)("p",null,"To install Int3face node, download the binary from the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Int3facechain/networks/releases"},"releases page")," or clone the repository to your local machine from Github. Please contact the Int3face team for accessing the ",(0,l.kt)("inlineCode",{parentName:"p"},"Int3facechain/bridge")," repository."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/Int3facechain/bridge.git int3face-bridge\n")),(0,l.kt)("p",null,"Then, check out the last released version. Currently, it's ",(0,l.kt)("inlineCode",{parentName:"p"},"v0.2.7"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd int3face-bridge\ngit checkout v0.2.7\n")),(0,l.kt)("p",null,"At the top-level directory of the project execute the following command, which will build and install the ",(0,l.kt)("inlineCode",{parentName:"p"},"int3faced")," binary to ",(0,l.kt)("inlineCode",{parentName:"p"},"$GOPATH/bin"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"make install\n")),(0,l.kt)("h3",{id:"verify-the-installation"},"Verify the installation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"int3faced version --long\n")),(0,l.kt)("h3",{id:"initialize-node"},"Initialize node"),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"int3faced")," to initialize your node (replace the ",(0,l.kt)("inlineCode",{parentName:"p"},"<your_moniker>")," with a name of your choosing):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"int3faced init <your_moniker> --chain-id=int3face-1\n")),(0,l.kt)("h3",{id:"download-genesis"},"Download genesis"),(0,l.kt)("p",null,"Download the ",(0,l.kt)("inlineCode",{parentName:"p"},"genesis.json")," file and place it into the Int3face configuration directory (",(0,l.kt)("inlineCode",{parentName:"p"},"~/.int3faced/config")," by default)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"wget https://raw.githubusercontent.com/Int3facechain/networks/main/int3face-1/genesis.json --output-document $HOME/.int3faced/config/genesis.json\n")),(0,l.kt)("h3",{id:"download-app-config"},"Download app config"),(0,l.kt)("p",null,"Download the ",(0,l.kt)("inlineCode",{parentName:"p"},"config.toml")," file and place it into the Int3face configuration directory (",(0,l.kt)("inlineCode",{parentName:"p"},"~/.int3faced/config")," by default)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"wget https://raw.githubusercontent.com/Int3facechain/networks/main/int3face-1/config.toml --output-document $HOME/.int3faced/config/config.toml\n")),(0,l.kt)("p",null,"The next step is to set your moniker in ",(0,l.kt)("inlineCode",{parentName:"p"},"config.toml")," instead of the default one. You can do it by modifying the ",(0,l.kt)("inlineCode",{parentName:"p"},"moniker")," field at the top of the ",(0,l.kt)("inlineCode",{parentName:"p"},"config.toml")," file."),(0,l.kt)("p",null,"Besides that, you can modify the config if it's needed, but make sure to keep all the default ports and persistent peer addresses."),(0,l.kt)("h3",{id:"import-validator-key"},"Import validator key"),(0,l.kt)("p",null,"You can either create a new key for your validator or import an existing key."),(0,l.kt)("h4",{id:"create-new-key"},"Create new key"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"int3faced keys add <key_name>\n")),(0,l.kt)("p",null,"Don't forget to save the mnemonic!"),(0,l.kt)("h4",{id:"import-existing"},"Import existing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"int3faced keys add <key_name> --recover\n")),(0,l.kt)("h3",{id:"sync-the-node"},"Sync the node"),(0,l.kt)("p",null,"We use a state snapshot to sync the state of the node. For state syncing, the ",(0,l.kt)("inlineCode",{parentName:"p"},"config.toml")," file must be properly set, which is already done if you use the config from this repo. If you want to know more about this process, feel free to refer to the documentation"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://docs.cometbft.com/v0.37/core/state-sync"},"https://docs.cometbft.com/v0.37/core/state-sync")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://docs.cosmos.network/main/user/run-node/run-node#state-sync"},"https://docs.cosmos.network/main/user/run-node/run-node#state-sync"))),(0,l.kt)("h4",{id:"download-and-run-update_trustsh-script"},"Download and Run update_trust.sh script"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"wget https://raw.githubusercontent.com/Int3facechain/networks/main/int3face-1/update_trust.sh -O update_trust.sh && chmod +x update_trust.sh && ./update_trust.sh\n")),(0,l.kt)("h3",{id:"start-the-node"},"Start the node"),(0,l.kt)("p",null,"The following command starts the node. Note that after starting, the node should sync first, which may take some time until you can start using it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"int3faced start\n")),(0,l.kt)("h3",{id:"top-up-the-account"},"Top up the account"),(0,l.kt)("p",null,"Contact the Int3face team and provide your validator's account address to top it up."),(0,l.kt)("h3",{id:"get-your-tendermint-validator-public-key"},"Get your Tendermint validator public key"),(0,l.kt)("p",null,"Firstly, you need to get your Tendermint validator public key. You must get is as it will be necessary to include in the transaction to create your validator."),(0,l.kt)("p",null,"If you are using Tendermint's native ",(0,l.kt)("inlineCode",{parentName:"p"},"priv_validator.json")," as your consensus key, you display your validator public key using the following command."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"int3faced comet show-validator\n")),(0,l.kt)("p",null,"The output looks like this"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'{"@type":"/cosmos.crypto.ed25519.PubKey","key":"w/YfkzNivDZ34y+mbK3/j3WWgYao18tBLf4Ypm2okCU="}\n')),(0,l.kt)("h3",{id:"submit-validator-creation"},"Submit validator creation"),(0,l.kt)("p",null,"Now that you have you key imported, you are able to use it to create the validator."),(0,l.kt)("p",null,"To create the validator, you will have to choose the following parameters for your validator:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"moniker"),(0,l.kt)("li",{parentName:"ul"},"commission-rate"),(0,l.kt)("li",{parentName:"ul"},"commission-max-rate"),(0,l.kt)("li",{parentName:"ul"},"commission-max-change-rate"),(0,l.kt)("li",{parentName:"ul"},"min-self-delegation (must be >1)"),(0,l.kt)("li",{parentName:"ul"},"website (optional)"),(0,l.kt)("li",{parentName:"ul"},"details (optional)"),(0,l.kt)("li",{parentName:"ul"},"pubkey (gotten in previous step)")),(0,l.kt)("p",null,"If you would like to override the memo field, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"--ip")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"--node-id")," flags."),(0,l.kt)("p",null,"An example ",(0,l.kt)("inlineCode",{parentName:"p"},"create-validator")," command looks like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'int3faced tx staking create-validator \\\n  --from=my_validator \\\n  --amount=10000000uint3 \\\n  --chain-id="int3face-1" \\\n  --moniker="{your_moniker}" # replace it \\ \n  --website="https://validator.website.io/" # replace it \\\n  --details="Validator info" # replace it \\ \n  --commission-rate="0.1" \\\n  --commission-max-rate="0.20" \\\n  --commission-max-change-rate="0.01" \\\n  --min-self-delegation="1" \\\n  --pubkey=\'{"@type":"/cosmos.crypto.ed25519.PubKey","key":"w/YfkzNivDZ34y+mbK3/j3WWgYao18tBLf4Ypm2okCU="}\' # replace it\n\n')),(0,l.kt)("h3",{id:"start-a-background-service"},"Start a background service"),(0,l.kt)("p",null,"You will need some way to keep the ",(0,l.kt)("inlineCode",{parentName:"p"},"int3faced start")," process always running. If you're on linux, you can do this by creating a service."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'sudo tee /etc/systemd/system/int3faced.service > /dev/null <<EOF  \n[Unit]\nDescription=Int3face Daemon\nAfter=network-online.target\n\n[Service]\nUser=$USER\nExecStart=$(which int3faced) start\nRestart=always\nRestartSec=3\nLimitNOFILE=infinity\n\nEnvironment="DAEMON_HOME=$HOME/.int3faced/"\nEnvironment="DAEMON_NAME=int3faced"\nEnvironment="DAEMON_ALLOW_DOWNLOAD_BINARIES=false"\nEnvironment="DAEMON_RESTART_AFTER_UPGRADE=true"\n\nStandardOutput=append:$HOME/.int3faced/logs/int3faced.log\nStandardError=append:$HOME/.int3faced/logs/int3faced-error.log\nSyslogIdentifier=int3faced\n\n[Install]\nWantedBy=multi-user.target\nEOF\n')),(0,l.kt)("p",null,"Service's logs are stored into the ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/.int3faced/logs/")," directory."),(0,l.kt)("p",null,"Then update and start the node:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"sudo -S systemctl daemon-reload\nsudo -S systemctl enable int3faced\nsudo -S systemctl start int3faced\n")),(0,l.kt)("p",null,"You can check the status with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"sudo -S systemctl status int3faced\n")),(0,l.kt)("p",null,"And disable, stop, or restart the service:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"sudo -S systemctl disable int3faced\nsudo -S systemctl stop int3faced\nsudo -S systemctl restart int3faced\n")),(0,l.kt)("p",null,"Logs are available using the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"sudo journalctl -u int3faced\n")))}p.isMDXComponent=!0}}]);